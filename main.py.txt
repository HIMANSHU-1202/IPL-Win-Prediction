import streamlit as st
import pickle
import pandas as pd

import helper

match = pd.read_csv('matches.csv')
delivery = pd.read_csv('deliveries.csv')



teams = ['Sunrisers Hyderabad',
 'Mumbai Indians',
 'Royal Challengers Bangalore',
 'Kolkata Knight Riders',
 'Kings XI Punjab',
 'Chennai Super Kings',
 'Rajasthan Royals',
 'Delhi Capitals']


cities = ['Hyderabad', 'Bangalore', 'Mumbai', 'Indore', 'Kolkata', 'Delhi',
       'Chandigarh', 'Jaipur', 'Chennai', 'Cape Town', 'Port Elizabeth',
       'Durban', 'Centurion', 'East London', 'Johannesburg', 'Kimberley',
       'Bloemfontein', 'Ahmedabad', 'Cuttack', 'Nagpur', 'Dharamsala',
       'Visakhapatnam', 'Pune', 'Raipur', 'Ranchi', 'Abu Dhabi',
       'Sharjah', 'Mohali', 'Bengaluru']

# creating data for teams and player information -:

# Drop duplicates from the match dataframe based on the 'id' column
match = match.drop_duplicates(subset=['id'], keep='first')

# Drop duplicates from the delivery dataframe based on the 'match_id' column
delivery = delivery.drop_duplicates(subset=['match_id'], keep='first')

# Drop duplicates from the match dataframe based on the 'id' column
match = match.drop_duplicates(subset=['id'], keep='first')

# Drop duplicates from the delivery dataframe based on the 'match_id' column
delivery = delivery.drop_duplicates(subset=['match_id'], keep='first')

# Merge the cleaned match and delivery dataframes on the 'id' column
merged_data = pd.merge(match, delivery, left_on='id', right_on='match_id', how='inner')

merged_data['team1']=merged_data['team1'].str.replace('Delhi Daredevils','Delhi Capitals')
merged_data['team2']=merged_data['team2'].str.replace('Delhi Daredevils','Delhi Capitals')

merged_data['team1']=merged_data['team1'].str.replace('Deccan Chargers','Sunrisers Hyderabad')
merged_data['team2']=merged_data['team2'].str.replace('Deccan Chargers','Sunrisers Hyderabad')

merged_data=merged_data[merged_data['team1'].isin(teams)]
merged_data=merged_data[merged_data['team2'].isin(teams)]



st.header('INDIAN PREMIER LEAGUE')

st.sidebar.title(' IPL ')

user_menu = st.sidebar.radio(
    'Select an Option',
    ('PREDICTION','TEAMS')
)



pipe = pickle.load(open('pipe.pkl','rb'))


if user_menu=='PREDICTION':
    st.title('IPL Win Predictor')
    col1, col2 = st.columns(2)

    with col1:
        batting_team = st.selectbox('Select the batting team',sorted(teams))
    with col2:
        bowling_team = st.selectbox('Select the bowling team',sorted(teams))

    selected_city = st.selectbox('Select host city',sorted(cities))

    target = st.number_input('Target')

    col3,col4,col5 = st.columns(3)

    with col3:
       score = st.number_input('Score')
    with col4:
        overs = st.number_input('Overs completed')
    with col5:
        wickets = st.number_input('Wickets out')

    if st.button('Predict Probability'):
        runs_left = target - score
        balls_left = 120 - (overs*6)
        wickets = 10 - wickets
        crr = score/overs
        rrr = (runs_left*6)/balls_left

        input_df = pd.DataFrame({'batting_team':[batting_team],'bowling_team':[bowling_team],'city':[selected_city],'runs_left':[runs_left],'balls_left':[balls_left],'wickets':[wickets],'total_runs_x':[target],'crr':[crr],'rrr':[rrr]})

        result = pipe.predict_proba(input_df)
        loss = result[0][0]
        win = result[0][1]
        st.header(batting_team + "- " + str(round(win*100)) + "%")
        st.header(bowling_team + "- " + str(round(loss*100)) + "%")

if user_menu=='TEAMS':
    st.subheader('Teams INFORMATION')
    x= helper.get_teams_info(merged_data)
    st.dataframe(x)

    selected_team=st.selectbox('Select Team',teams)
    st.subheader(selected_team+ ' Team information')
    x=helper.sel_team_info(merged_data,selected_team)
    st.dataframe(x)

